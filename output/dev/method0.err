output prefix: /Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/dev/llvm/method0
llvmas: /Users/cmk/llvm/bin/llvm-as
llc: /Users/cmk/llvm/bin/llc
cc: gcc
codegen: /Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/answer/decafexpr
stdlib: /Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/answer/decaf-stdlib.c
generating llvm code:/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/answer/decafexpr ... ok
; ModuleID = 'Test'

define i32 @main() {
entry:
  %x = alloca i32
  store i32 1, i32* %x
  call void @print_int(i32 1)
  %x1 = load i32, i32* %x
  call void @print_int(i32 %x1)
  ret i32 0
}

define void @test() {
entry:
  %x = alloca i32
  store i32 1, i32* %x
  call void @print_int(i32 1)
  %x1 = load i32, i32* %x
  call void @print_int(i32 %x1)
  ret void
}

declare void @print_int(i32)
assembling to bitcode:/Users/cmk/llvm/bin/llvm-as "/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/dev/llvm/method0.llvm" -o "/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/dev/llvm/method0.llvm.bc" ... ok
converting to native code:/Users/cmk/llvm/bin/llc "/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/dev/llvm/method0.llvm.bc" -o "/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/dev/llvm/method0.llvm.s" ... ok
linking:gcc -o "/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/dev/llvm/method0.llvm.exec" "/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/dev/llvm/method0.llvm.s" "/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/answer/decaf-stdlib.c" ... ok
running:/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/dev/llvm/method0.llvm.exec ... ok
