output prefix: llvm/dev/arith1
llvmas: /Users/cmk/llvm/bin/llvm-as
llc: /Users/cmk/llvm/bin/llc
cc: gcc
codegen: /Users/cmk/Developer/cworkspace/compiler/hw4/Lexer/answer/decafcomp
stdlib: /Users/cmk/Developer/cworkspace/compiler/hw4/Lexer/answer/decaf-stdlib.c
generating llvm code:/Users/cmk/Developer/cworkspace/compiler/hw4/Lexer/answer/decafcomp ... ok
; ModuleID = 'foo'

define i32 @main() {
entry:
  %size = alloca i32
  %c = alloca i1
  %b = alloca i1
  %a = alloca i1
  %flag = alloca i1
  store i1 false, i1* %flag
  store i1 false, i1* %a
  store i1 false, i1* %b
  store i1 false, i1* %c
  store i32 0, i32* %size
  store i1 true, i1* %a
  store i1 false, i1* %b
  store i1 true, i1* %c
  %a1 = load i1, i1* %a
  store i1 true, i1* %flag
  store i32 0, i32* %size
  %size2 = load i32, i32* %size
  call void @print_int(i32 %size2)
  ret i32 0
}

declare void @print_int(i32)
assembling to bitcode:/Users/cmk/llvm/bin/llvm-as "llvm/dev/arith1.llvm" -o "llvm/dev/arith1.llvm.bc" ... ok
converting to native code:/Users/cmk/llvm/bin/llc "llvm/dev/arith1.llvm.bc" -o "llvm/dev/arith1.llvm.s" ... ok
linking:gcc -o "llvm/dev/arith1.llvm.exec" "llvm/dev/arith1.llvm.s" "/Users/cmk/Developer/cworkspace/compiler/hw4/Lexer/answer/decaf-stdlib.c" ... ok
running:llvm/dev/arith1.llvm.exec ... ok
