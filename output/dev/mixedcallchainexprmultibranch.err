output prefix: /Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/dev/llvm/mixedcallchainexprmultibranch
llvmas: /Users/cmk/llvm/bin/llvm-as
llc: /Users/cmk/llvm/bin/llc
cc: gcc
codegen: /Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/answer/decafexpr
stdlib: /Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/answer/decaf-stdlib.c
generating llvm code:/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/answer/decafexpr ... ok
; ModuleID = 'Test'

define i32 @main() {
entry:
  call void @test1(i32 1, i32 1)
  ret i32 0
}

define void @test1(i32 %a, i32 %x) {
entry:
  %x2 = alloca i32
  %a1 = alloca i32
  store i32 %a, i32* %a1
  store i32 %x, i32* %x2
  %x3 = load i32, i32* %x2
  call void @print_int(i32 %x3)
  %a4 = load i32, i32* %a1
  call void @print_int(i32 %a4)
  %x5 = load i32, i32* %x2
  %addtmp = add i32 %x5, 1
  %a6 = load i32, i32* %a1
  %nottmp = xor i32 %a6, -1
  %0 = and i32 1, %nottmp
  call void @test2a(i32 %addtmp, i32 %0)
  %x7 = load i32, i32* %x2
  %addtmp8 = add i32 %x7, 1
  %a9 = load i32, i32* %a1
  %nottmp10 = xor i32 %a9, -1
  %1 = and i32 1, %nottmp10
  call void @test2b(i32 %addtmp8, i32 %1)
  ret void
}

define void @test2a(i32 %x, i32 %a) {
entry:
  %a2 = alloca i32
  %x1 = alloca i32
  store i32 %x, i32* %x1
  store i32 %a, i32* %a2
  %x3 = load i32, i32* %x1
  call void @print_int(i32 %x3)
  %a4 = load i32, i32* %a2
  call void @print_int(i32 %a4)
  %a5 = load i32, i32* %a2
  %nottmp = xor i32 %a5, -1
  %0 = and i32 1, %nottmp
  %x6 = load i32, i32* %x1
  %addtmp = add i32 %x6, 1
  call void @test3(i32 %0, i32 %addtmp)
  ret void
}

define void @test2b(i32 %x, i32 %a) {
entry:
  %a2 = alloca i32
  %x1 = alloca i32
  store i32 %x, i32* %x1
  store i32 %a, i32* %a2
  %x3 = load i32, i32* %x1
  call void @print_int(i32 %x3)
  %a4 = load i32, i32* %a2
  call void @print_int(i32 %a4)
  %a5 = load i32, i32* %a2
  %x6 = load i32, i32* %x1
  call void @test3(i32 %a5, i32 %x6)
  ret void
}

define void @test3(i32 %a, i32 %x) {
entry:
  %x2 = alloca i32
  %a1 = alloca i32
  store i32 %a, i32* %a1
  store i32 %x, i32* %x2
  %x3 = load i32, i32* %x2
  call void @print_int(i32 %x3)
  %a4 = load i32, i32* %a1
  call void @print_int(i32 %a4)
  ret void
}

declare void @print_int(i32)
assembling to bitcode:/Users/cmk/llvm/bin/llvm-as "/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/dev/llvm/mixedcallchainexprmultibranch.llvm" -o "/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/dev/llvm/mixedcallchainexprmultibranch.llvm.bc" ... ok
converting to native code:/Users/cmk/llvm/bin/llc "/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/dev/llvm/mixedcallchainexprmultibranch.llvm.bc" -o "/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/dev/llvm/mixedcallchainexprmultibranch.llvm.s" ... ok
linking:gcc -o "/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/dev/llvm/mixedcallchainexprmultibranch.llvm.exec" "/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/dev/llvm/mixedcallchainexprmultibranch.llvm.s" "/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/answer/decaf-stdlib.c" ... ok
running:/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/dev/llvm/mixedcallchainexprmultibranch.llvm.exec ... ok
