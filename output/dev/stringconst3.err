output prefix: /Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/dev/llvm/stringconst3
llvmas: /Users/cmk/llvm/bin/llvm-as
llc: /Users/cmk/llvm/bin/llc
cc: gcc
codegen: /Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/answer/decafexpr
stdlib: /Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/answer/decaf-stdlib.c
generating llvm code:/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/answer/decafexpr ... ok
; ModuleID = 'Test'

@gstr = private unnamed_addr constant [7 x i8] c"hello,\00"
@gstr.1 = private unnamed_addr constant [7 x i8] c" world\00"
@gstr.2 = private unnamed_addr constant [2 x i8] c"\0A\00"

define i32 @main() {
entry:
  call void @print_string(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @gstr, i32 0, i32 0))
  call void @print_string(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @gstr.1, i32 0, i32 0))
  call void @print_string(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @gstr.2, i32 0, i32 0))
  ret i32 0
}

declare void @print_string(i8*)
assembling to bitcode:/Users/cmk/llvm/bin/llvm-as "/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/dev/llvm/stringconst3.llvm" -o "/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/dev/llvm/stringconst3.llvm.bc" ... ok
converting to native code:/Users/cmk/llvm/bin/llc "/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/dev/llvm/stringconst3.llvm.bc" -o "/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/dev/llvm/stringconst3.llvm.s" ... ok
linking:gcc -o "/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/dev/llvm/stringconst3.llvm.exec" "/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/dev/llvm/stringconst3.llvm.s" "/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/answer/decaf-stdlib.c" ... ok
running:/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/dev/llvm/stringconst3.llvm.exec ... ok
