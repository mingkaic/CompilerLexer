output prefix: llvm/test/2int-blocks
llvmas: /Users/cmk/llvm/bin/llvm-as
llc: /Users/cmk/llvm/bin/llc
cc: gcc
codegen: /Users/cmk/Developer/cworkspace/compiler/hw4/Lexer/answer/decafcomp
stdlib: /Users/cmk/Developer/cworkspace/compiler/hw4/Lexer/answer/decaf-stdlib.c
generating llvm code:/Users/cmk/Developer/cworkspace/compiler/hw4/Lexer/answer/decafcomp ... ok
; ModuleID = 'C'

define i32 @main() {
entry:
  %y1 = alloca i32
  %q = alloca i32
  %p = alloca i32
  %y = alloca i32
  %x = alloca i32
  store i32 0, i32* %x
  store i32 0, i32* %y
  store i32 0, i32* %p
  store i32 0, i32* %q
  store i32 0, i32* %y1
  store i32 1, i32* %x
  store i32 1, i32* %y1
  %x2 = load i32, i32* %x
  call void @print_int(i32 %x2)
  %y3 = load i32, i32* %y1
  call void @print_int(i32 %y3)
  ret i32 0
}

declare void @print_int(i32)
assembling to bitcode:/Users/cmk/llvm/bin/llvm-as "llvm/test/2int-blocks.llvm" -o "llvm/test/2int-blocks.llvm.bc" ... ok
converting to native code:/Users/cmk/llvm/bin/llc "llvm/test/2int-blocks.llvm.bc" -o "llvm/test/2int-blocks.llvm.s" ... ok
linking:gcc -o "llvm/test/2int-blocks.llvm.exec" "llvm/test/2int-blocks.llvm.s" "/Users/cmk/Developer/cworkspace/compiler/hw4/Lexer/answer/decaf-stdlib.c" ... ok
running:llvm/test/2int-blocks.llvm.exec ... ok
