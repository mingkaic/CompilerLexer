output prefix: /Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/test/llvm/2bool-blocks
llvmas: /Users/cmk/llvm/bin/llvm-as
llc: /Users/cmk/llvm/bin/llc
cc: gcc
codegen: /Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/answer/decafexpr
stdlib: /Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/answer/decaf-stdlib.c
generating llvm code:/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/answer/decafexpr ... ok
; ModuleID = 'C'

define i32 @main() {
entry:
  %y1 = alloca i32
  %q = alloca i32
  %p = alloca i32
  %y = alloca i32
  %x = alloca i32
  store i32 1, i32* %x
  store i32 0, i32* %y1
  store i32 1, i32* %p
  store i32 1, i32* %q
  %p2 = load i32, i32* %p
  call void @print_int(i32 %p2)
  %q3 = load i32, i32* %q
  call void @print_int(i32 %q3)
  %x4 = load i32, i32* %x
  call void @print_int(i32 %x4)
  %y5 = load i32, i32* %y1
  call void @print_int(i32 %y5)
  ret i32 0
}

declare void @print_int(i32)
assembling to bitcode:/Users/cmk/llvm/bin/llvm-as "/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/test/llvm/2bool-blocks.llvm" -o "/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/test/llvm/2bool-blocks.llvm.bc" ... ok
converting to native code:/Users/cmk/llvm/bin/llc "/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/test/llvm/2bool-blocks.llvm.bc" -o "/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/test/llvm/2bool-blocks.llvm.s" ... ok
linking:gcc -o "/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/test/llvm/2bool-blocks.llvm.exec" "/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/test/llvm/2bool-blocks.llvm.s" "/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/answer/decaf-stdlib.c" ... ok
running:/Users/cmk/Developer/cworkspace/compiler/hw3/Lexer/output/test/llvm/2bool-blocks.llvm.exec ... ok
