output prefix: llvm/test/3param
llvmas: /Users/cmk/llvm/bin/llvm-as
llc: /Users/cmk/llvm/bin/llc
cc: gcc
codegen: /Users/cmk/Developer/cworkspace/compiler/hw4/Lexer/answer/decafcomp
stdlib: /Users/cmk/Developer/cworkspace/compiler/hw4/Lexer/answer/decaf-stdlib.c
generating llvm code:/Users/cmk/Developer/cworkspace/compiler/hw4/Lexer/answer/decafcomp ... ok
; ModuleID = 'C'

define i32 @main() {
entry:
  %calltmp = call i32 @foo(i32 1, i32 2, i1 true)
  ret i32 0
}

define i32 @foo(i32 %x, i32 %y, i1 %z) {
entry:
  %z3 = alloca i1
  %y2 = alloca i32
  %x1 = alloca i32
  store i32 %x, i32* %x1
  store i32 %y, i32* %y2
  store i1 %z, i1* %z3
  store i32 1, i32* %x1
  store i32 1, i32* %y2
  store i1 false, i1* %z3
  %x4 = load i32, i32* %x1
  call void @print_int(i32 %x4)
  %y5 = load i32, i32* %y2
  call void @print_int(i32 %y5)
  %z6 = load i1, i1* %z3
  %0 = zext i1 %z6 to i32
  call void @print_int(i32 %0)
  ret i32 0
}

declare void @print_int(i32)
assembling to bitcode:/Users/cmk/llvm/bin/llvm-as "llvm/test/3param.llvm" -o "llvm/test/3param.llvm.bc" ... ok
converting to native code:/Users/cmk/llvm/bin/llc "llvm/test/3param.llvm.bc" -o "llvm/test/3param.llvm.s" ... ok
linking:gcc -o "llvm/test/3param.llvm.exec" "llvm/test/3param.llvm.s" "/Users/cmk/Developer/cworkspace/compiler/hw4/Lexer/answer/decaf-stdlib.c" ... ok
running:llvm/test/3param.llvm.exec ... ok
